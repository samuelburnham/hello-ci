# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  nightly-version:
    type: string
    default: "nightly-2022-04-05"
#orbs:
#  rust: cimg/rust:1.59.0

executors:
  default:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
  darwin:
    macos:
      xcode: "13.3.0"
    resource_class: xlarge

restore-workspace: &restore-workspace
  attach_workspace:
    at: ~/

restore-cache: &restore-cache
  restore_cache:
    keys:
      - cargo-v2-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - repo-source-{{ .Branch }}-{{ .Revision }}

commands:
  set-env-path:
    steps:
      - run:
          name: Set the PATH env variable
          command: |
            # Also put the Rust LLVM tools into the PATH.
                        echo 'export PATH="$HOME:~/.cargo/bin:~/.rustup/toolchains/<< pipeline.parameters.nightly-version >>-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:$PATH"' | tee --append $BASH_ENV
            source $BASH_ENV
#    steps:
#      - run:
#          name: Set PATH env variable
#      - command: |
#          echo 'export PATH="$HOME:~/.cargo/bin:~/.rustup/toolchains/<< pipeline.parameters.stable-version >>-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:$PATH"' | tee --append $BASH_ENV
#          source $BASH_ENV
#env:
#  MSRV: 1.59.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
 # set-msrv:
 #   steps:
 #     - run:
 #       name: msrv
 #       command: echo "::set-output name=msrv::$(echo $MSRV)"
  cargo-fetch:
    executor: default
    steps:
      - checkout
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - set-env-path
      - run: echo $HOME
      - run: cargo --version
      - run: rustc --version
      - run:
          name: Update submodules
          command: git submodule update --init --recursive
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - cargo-v2-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run: cargo update
      - run: cargo fetch
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      # A nightly build is needed for code coverage reporting
      - run: rustup toolchain install --profile minimal << pipeline.parameters.nightly-version >>
      - run: rustup component add --toolchain << pipeline.parameters.nightly-version >> llvm-tools-preview
      - run: rustc --version
      - run: rm -rf .git
      - persist_to_workspace:
          root: ~/
          paths: .
      - save_cache:
          key: cargo-v2-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - "~/.cargo"
            - "~/.rustup"

  linux-build:
    executor: default
    steps:
      - set-env-path
      - *restore-workspace
      - *restore-cache
      - run:
          cargo --version
      - run:
          name: Linux Tests
          command: cargo test --verbose
          no_output_timeout: 30m

  mac-build:
    executor: darwin
    steps:
      - set-env-path
      - *restore-workspace
      - *restore-cache
      - run:
          cargo --version
      - run:
          name: MacOS Tests
          command: cargo test --verbose
          no_output_timeout: 30m
 
workflows:
  test-all:
    jobs:
      - cargo-fetch
      #- linux-build:
      #    requires:
      #     - cargo-fetch
      - mac-build:
          requires:
           - cargo-fetch
      # build



      
