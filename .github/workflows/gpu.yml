name: GPU tests

on:
  push:
    branches:
      - main
env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test-gpu:
    runs-on: [self-hosted, gpu]
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v3
        #with:
        #  submodules: recursive
      - uses: actions-rs/toolchain@v1
      - uses: taiki-e/install-action@nextest
      - uses: Swatinem/rust-cache@v2
      - run: which c++
      - run: c++ --version
      - run: apt update && apt install -y clang-14
      - run: which clang
      - run: clang --version
      - run: which clang++
      - run: clang++ --version
      - name: gpu test
        run: |
          #cargo nextest run --release --features gpu
          cargo nextest run
